/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/session": {
    /**
     * Returns authorized user session data 
     * @description Returns user session data from cookie session
     */
    get: {
      responses: {
        200: components["responses"]["SessionGetSuccess"];
        401: components["responses"]["Unauthorized"];
        500: components["responses"]["SessionGetError"];
      };
    };
    /**
     * Deletes user session 
     * @description Deletes user session and clear user session cookie
     */
    delete: {
      responses: {
        /** @description Session deleted */
        200: never;
        401: components["responses"]["Unauthorized"];
        500: components["responses"]["SessionDeleteError"];
      };
    };
  };
  "/auth/email": {
    /**
     * Authorization via email 
     * @description Authorize user with code that previously was sent to email. If user with specified email does not exist, create new user. Can be used for sign-in and sign-up.
     */
    post: {
      parameters: {
        header?: {
          "Accept-Language"?: "EN" | "RU";
        };
      };
      requestBody: components["requestBodies"]["AuthEmailPost"];
      responses: {
        201: components["responses"]["AuthSuccess"];
        400: components["responses"]["AuthByEmailFailed"];
        500: components["responses"]["AuthByEmailError"];
      };
    };
  };
  "/auth/password": {
    /**
     * Authorization via email with password 
     * @description Authorize user with email and password. If user with specified email does not exist, create new user. Can be used for sign-in and sign-up.
     */
    post: {
      parameters: {
        header?: {
          "Accept-Language"?: "EN" | "RU";
        };
      };
      requestBody: components["requestBodies"]["AuthPasswordPost"];
      responses: {
        201: components["responses"]["AuthSuccess"];
        400: components["responses"]["AuthByPasswordFailed"];
        500: components["responses"]["AuthByPasswordError"];
      };
    };
  };
  "/email/send-code": {
    /**
     * Send secret authorization code to specified email 
     * @description Generates 5-digit string, saves it and sends it to specified email
     */
    post: {
      requestBody: components["requestBodies"]["EmailSendCodePost"];
      responses: {
        /** @description Mail was successfully sent */
        200: never;
        400: components["responses"]["SendCodeFailed"];
        500: components["responses"]["SendCodeError"];
      };
    };
  };
  "/user/{name}": {
    /**
     * Get user main info by username 
     * @description Returns user's main data by username, if exist
     */
    get: {
      parameters: {
        path: {
          name: components["parameters"]["Name"];
        };
      };
      responses: {
        200: components["responses"]["UserGetByUsernameSuccess"];
        400: components["responses"]["UserGetByUsernameFailed"];
        500: components["responses"]["UserGetByUsernameError"];
      };
    };
  };
  "/user/check-name/{name}": {
    /**
     * Check name on name already used 
     * @description Checks specified name on already exist
     */
    get: {
      parameters: {
        path: {
          name: components["parameters"]["Name"];
        };
      };
      responses: {
        /** @description This name isn't in use */
        200: never;
        400: components["responses"]["CheckNameFailed"];
        500: components["responses"]["CheckNameError"];
      };
    };
  };
  "/user": {
    /**
     * Update user's main data 
     * @description Updates some user's main data
     */
    patch: {
      requestBody: components["requestBodies"]["UserPatch"];
      responses: {
        /** @description Updated */
        200: never;
        400: components["responses"]["UserPatchFailed"];
        401: components["responses"]["Unauthorized"];
        500: components["responses"]["UserPatchError"];
      };
    };
  };
  "/user/password": {
    /**
     * Update user's password 
     * @description Updates user's password by email
     */
    patch: {
      requestBody: components["requestBodies"]["UserPasswordPatch"];
      responses: {
        /** @description Password Updated */
        200: never;
        400: components["responses"]["UserPasswordPatchFailed"];
        401: components["responses"]["Unauthorized"];
        500: components["responses"]["UserPasswordPatchError"];
      };
    };
  };
  "/user/email": {
    /**
     * Update user's email 
     * @description Updates user's email by password
     */
    patch: {
      requestBody: components["requestBodies"]["UserEmailPatch"];
      responses: {
        /** @description Email updated */
        200: never;
        400: components["responses"]["UserEmailPatchFailed"];
        401: components["responses"]["Unauthorized"];
        500: components["responses"]["UserEmailPatchError"];
      };
    };
  };
  "/user/name": {
    /**
     * Update user name 
     * @description Updates user name
     */
    patch: {
      requestBody: components["requestBodies"]["UserNamePatch"];
      responses: {
        /** @description Name updated */
        200: never;
        400: components["responses"]["UserNamePatchFailed"];
        401: components["responses"]["Unauthorized"];
        500: components["responses"]["UserNamePatchError"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    readonly User: {
      readonly name: components["schemas"]["Name"];
      readonly biography?: components["schemas"]["Biography"];
      readonly role: components["schemas"]["Role"];
      readonly friendsIds: components["schemas"]["FriendsIds"];
      readonly firstName?: components["schemas"]["FirstName"];
      readonly lastName?: components["schemas"]["LastName"];
      readonly createTime: components["schemas"]["CreateTime"];
    };
    readonly Me: {
      readonly name: components["schemas"]["Name"];
      readonly email: components["schemas"]["Email"];
      readonly role: components["schemas"]["Role"];
      readonly friendsIds: components["schemas"]["FriendsIds"];
      readonly language: components["schemas"]["Language"];
      readonly theme: components["schemas"]["Theme"];
      readonly firstName?: components["schemas"]["FirstName"];
      readonly lastName?: components["schemas"]["LastName"];
      readonly biography?: components["schemas"]["Biography"];
      readonly createTime: components["schemas"]["CreateTime"];
      /** @example false */
      readonly isEmailVerified: boolean;
    };
    readonly Error: {
      /** @example You are not logged in */
      readonly description?: string;
      /**
       * @example {
       *   "email": "email is not the correct email",
       *   "code": "code must have a length of 5"
       * }
       */
      readonly fields?: {
        [key: string]: string | undefined;
      };
    };
    /** @example user95 */
    Name: string;
    /**
     * Format: email 
     * @example example@example.com
     */
    Email: string;
    /**
     * Format: password 
     * @example Bob2020
     */
    Password: string;
    /** @example QUERY */
    Code: string;
    /**
     * @example SYSTEM 
     * @enum {string}
     */
    Theme: "DARK" | "LIGHT" | "SYSTEM";
    /**
     * @example RU 
     * @enum {string}
     */
    Language: "EN" | "RU";
    /**
     * @example USER 
     * @enum {string}
     */
    Role: "USER" | "ADMIN";
    /** @example Bomb */
    FirstName: string;
    /** @example Hodovaniuk */
    LastName: string;
    readonly FriendsIds: readonly (number)[];
    /** @example 23 y.o designer from San Francisco */
    Biography: string;
    /**
     * Format: date-time 
     * @example "2023-06-10T12:06:14.491Z"
     */
    readonly CreateTime: string;
    readonly Sessions: readonly (string)[];
  };
  responses: {
    /** @description User's info by session */
    SessionGetSuccess: {
      content: {
        "application/json": components["schemas"]["Me"];
      };
    };
    /** @description Lost connection to Redis */
    SessionGetError: {
      content: {
        "application/json": ({
          /**
           * @example transaction_failed 
           * @enum {string}
           */
          code: "server_error" | "transaction_failed";
        }) & components["schemas"]["Error"];
      };
    };
    /** @description Lost connection to Redis */
    SessionDeleteError: {
      content: {
        "application/json": ({
          /**
           * @example transaction_failed 
           * @enum {string}
           */
          code: "server_error" | "transaction_failed";
        }) & components["schemas"]["Error"];
      };
    };
    /** @description OK */
    AuthSuccess: never;
    /** @description Check or recover your credentials */
    AuthByEmailFailed: {
      content: {
        "application/json": ({
          /**
           * @example invalid_validation 
           * @enum {string}
           */
          code: "invalid_validation" | "code_invalid_or_expired";
        }) & components["schemas"]["Error"];
      };
    };
    /** @description Can't use PostgreSQL connection */
    AuthByEmailError: {
      content: {
        "application/json": ({
          /**
           * @example transaction_failed 
           * @enum {string}
           */
          code: "server_error" | "transaction_failed";
        }) & components["schemas"]["Error"];
      };
    };
    /** @description Check or recover your credentials */
    AuthByPasswordFailed: {
      content: {
        "application/json": ({
          /**
           * @example invalid_password 
           * @enum {string}
           */
          code: "invalid_password" | "invalid_validation" | "password_not_set";
        }) & components["schemas"]["Error"];
      };
    };
    /** @description Lost connection to Postgresql */
    AuthByPasswordError: {
      content: {
        "application/json": ({
          /**
           * @example transaction_failed 
           * @enum {string}
           */
          code: "server_error" | "transaction_failed";
        }) & components["schemas"]["Error"];
      };
    };
    /** @description Failed to check name on exist */
    CheckNameFailed: {
      content: {
        "application/json": ({
          /**
           * @example already_exist 
           * @enum {string}
           */
          code: "already_exist" | "invalid_validation";
        }) & components["schemas"]["Error"];
      };
    };
    /** @description Lost connection to PostgreSQL */
    CheckNameError: {
      content: {
        "application/json": {
          /**
           * @example server_error 
           * @enum {string}
           */
          code: "server_error";
        } & components["schemas"]["Error"];
      };
    };
    /** @description Failed to send mail message */
    SendCodeFailed: {
      content: {
        "application/json": {
          /**
           * @example invalid_validation 
           * @enum {string}
           */
          code: "invalid_validation";
        } & components["schemas"]["Error"];
      };
    };
    /** @description Can't submit data */
    SendCodeError: {
      content: {
        "application/json": ({
          /**
           * @example cant_send_mail 
           * @enum {string}
           */
          code: "cant_send_mail" | "transaction_failed" | "server_error";
        }) & components["schemas"]["Error"];
      };
    };
    /** @description User was successfully got */
    UserGetByUsernameSuccess: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    /** @description Failed to get user */
    UserGetByUsernameFailed: {
      content: {
        "application/json": ({
          /**
           * @example not_found 
           * @enum {string}
           */
          code: "not_found" | "invalid_validation";
        }) & components["schemas"]["Error"];
      };
    };
    /** @description Lost connection to PostgreSQL */
    UserGetByUsernameError: {
      content: {
        "application/json": {
          /**
           * @example server_error 
           * @enum {string}
           */
          code: "server_error";
        } & components["schemas"]["Error"];
      };
    };
    /** @description Failed to edit user data */
    UserPatchFailed: {
      content: {
        "application/json": {
          /**
           * @example invalid_validation 
           * @enum {string}
           */
          code: "invalid_validation";
        } & components["schemas"]["Error"];
      };
    };
    /** @description Lost connection to PostgreSQL */
    UserPatchError: {
      content: {
        "application/json": {
          /**
           * @example server_error 
           * @enum {string}
           */
          code: "server_error";
        } & components["schemas"]["Error"];
      };
    };
    /** @description Failed to edit user password */
    UserPasswordPatchFailed: {
      content: {
        "application/json": ({
          /**
           * @example invalid_password 
           * @enum {string}
           */
          code: "invalid_validation" | "invalid_password";
        }) & components["schemas"]["Error"];
      };
    };
    /** @description Lost connection to PostgreSQL */
    UserPasswordPatchError: {
      content: {
        "application/json": {
          /**
           * @example server_error 
           * @enum {string}
           */
          code: "server_error";
        } & components["schemas"]["Error"];
      };
    };
    /** @description Failed to edit user email */
    UserEmailPatchFailed: {
      content: {
        "application/json": ({
          /**
           * @example invalid_password 
           * @enum {string}
           */
          code: "invalid_validation" | "invalid_password" | "already_exist" | "password_not_set";
        }) & components["schemas"]["Error"];
      };
    };
    /** @description Lost connection to PostgreSQL */
    UserEmailPatchError: {
      content: {
        "application/json": {
          /**
           * @example server_error 
           * @enum {string}
           */
          code: "server_error";
        } & components["schemas"]["Error"];
      };
    };
    /** @description Failed to edit user name */
    UserNamePatchFailed: {
      content: {
        "application/json": ({
          /**
           * @example already_exist 
           * @enum {string}
           */
          code: "invalid_validation" | "already_exist";
        }) & components["schemas"]["Error"];
      };
    };
    /** @description Lost connection to PostgreSQL */
    UserNamePatchError: {
      content: {
        "application/json": {
          /**
           * @example server_error 
           * @enum {string}
           */
          code: "server_error";
        } & components["schemas"]["Error"];
      };
    };
    /** @description User must be authorized */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: {
    /** @description Name */
    Name: components["schemas"]["Name"];
  };
  requestBodies: {
    AuthEmailPost: {
      content: {
        "application/json": {
          email: components["schemas"]["Email"];
          code: components["schemas"]["Code"];
        };
      };
    };
    AuthPasswordPost: {
      content: {
        "application/json": {
          email: components["schemas"]["Email"];
          password: components["schemas"]["Password"];
        };
      };
    };
    EmailSendCodePost: {
      content: {
        "application/json": {
          email: components["schemas"]["Email"];
        };
      };
    };
    UserPatch: {
      content: {
        "application/json": {
          firstName?: components["schemas"]["FirstName"];
          lastName?: components["schemas"]["LastName"];
          biography?: components["schemas"]["Biography"];
          theme?: components["schemas"]["Theme"];
          language?: components["schemas"]["Language"];
        };
      };
    };
    UserPasswordPatch: {
      content: {
        "application/json": {
          oldPassword: components["schemas"]["Password"];
          newPassword: components["schemas"]["Password"];
        };
      };
    };
    UserEmailPatch: {
      content: {
        "application/json": {
          newEmail: components["schemas"]["Email"];
          password: components["schemas"]["Password"];
        };
      };
    };
    UserNamePatch: {
      content: {
        "application/json": {
          name: components["schemas"]["Name"];
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
